// Your implementation for the record class goes here.
#include <sstream>
#include <algorithm>
#include <functional>

// helper functions
template <class T>
inline bool compStrPair(const string a, const pair<string, T> b)
{
  return (a < b.first);
}

template <class T>
inline bool compPairStr(const pair<string, T> a, const string b)
{
  return (a.first < b);
}

template <class T1, class T2>
inline bool compPairFirst (const pair<string, T1>& a, const pair<string, T2>& b) 
{
  return (a.first < b.first);
}


// Record operations
template <class value>
ostream& operator<<(ostream& out, const Record<value>& r)
{
  out << "{" << endl;

  for (typename Record<value>::const_iterator it = r.entries.begin(); it != r.entries.end(); ++it) {
    out << "  " << it->first << " = " << it->second << endl;
  }
  
  out << "}";
  string str = " ";
  TrimString(str);
  return out;
}

template <class value>
istream& operator>>(istream& in, Record<value>& r)
{
  
  if (in.peek() != '{') { 		// bail if not at record start
    in.setstate(ios::failbit);  	// set stream failure, so we can detect it
    return in; 
  }
   
  in.ignore(1024, '\n');
  while (true) {
    string line;
    getline(in, line, '\n');
    istringstream istr(line.c_str());
    if (istr.peek() == '}') break;
    std::pair<string, value> entry;
    ReadFieldname(istr, entry.first);
    ReadValue(istr, entry.second);
    r.entries.push_back(entry);
  }
  return in; 
}

template <class value>
bool Record<value>::matchesQuery(const string& attr, DBQueryOperator op,
                                 const value& want) const 
{
  typename entries_type::const_iterator begin, end;
  entries_type tmp_entries;  

  if (attr == "*") {
    begin = entries.begin();
    end = entries.end();
  } else {
    tmp_entries = entries;  
    sort(tmp_entries.begin(), tmp_entries.end(), compPairFirst<value, value>);

    begin = entries.begin();
    //end = entries.end();
    begin = lower_bound(tmp_entries.begin(), tmp_entries.end(), attr, compPairStr<value>);
    end = upper_bound(tmp_entries.begin(), tmp_entries.end(), attr, compStrPair<value>);
    //begin = lower_bound(tmp_entries.begin(), tmp_entries.end(), attr, compPairFirst<value>);
    //end = upper_bound(tmp_entries.begin(), tmp_entries.end(), attr, compPairFirst<value>);
  }

  for (typename entries_type::const_iterator it = begin; it != end; ++it) {
    value val = it->second;

    switch (op) {
      case Equal:       if (val == want) return true; break;
      case NotEqual:    if (val != want) return true; break;
      case LessThan:    if (val < want) return true; break;
      case GreaterThan: if (val > want) return true; break;
    }
  }
    return false;
}

inline void ReadFieldname(istream& in, string& fieldname)
{
  getline(in, fieldname, '=');
  TrimString(fieldname);
}

template <class value>
inline void ReadValue(istream& in, value& val)
{
  in >> val;
}

template <>
inline void ReadValue<string>(istream& in, string& val)
{
  getline(in, val, '\n');
  TrimString(val);
}


